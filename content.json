{"meta":{"title":"Angry Chaired Blog","subtitle":"Writing about my Web Development learning...","description":"Inexperienced and curious forrays into the sprawling world of Web Development ","author":"kaem","url":"https://ikaem.github.io/angry-chaired-blog","root":"/angry-chaired-blog/"},"pages":[{"title":"Categories","date":"2017-01-30T18:16:17.000Z","updated":"2020-08-12T12:34:30.057Z","comments":false,"path":"categories/index.html","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-08-12T14:24:04.936Z","updated":"2020-08-12T14:24:04.936Z","comments":true,"path":"css/post-style.css","permalink":"https://ikaem.github.io/angry-chaired-blog/css/post-style.css","excerpt":"","text":".featured-image { /* object-fit: cover; max-height: 100px; max-width: 100%; */ } body { /* background-color: red; */ } .article-gallery-photos { /* display: grid; grid-template-columns: 1fr 1fr 1fr; */ }"}],"posts":[{"title":"GraphQL & React: PSQL Database & Tables","slug":"graphql-react-psql-database-tables","date":"2020-08-11T14:44:04.000Z","updated":"2020-08-11T19:20:45.775Z","comments":true,"path":"graphql-react-psql-database-tables/","link":"","permalink":"https://ikaem.github.io/angry-chaired-blog/graphql-react-psql-database-tables/","excerpt":"Part [0] of [0] in [Project Name][Excerpt / Intro Here]","text":"Part [0] of [0] in [Project Name][Excerpt / Intro Here] See Project InformationStep [0]: [Descriptive Project Step Name][Content and Other Steps here] Project InformationGoals [Goal 1] [Goal 2] […] Steps [Step 1] [Step 2] […] Tech and Tools [Tech 1] [Tech 2] […] Experience with Tech &amp; Tools[Experienc with Tech and Tools…] DISCLAIMERDon’t take any of this seriously and as a matter-of-fact. These are my notes. It might look like I am trying to teach something to someone. I am not.","categories":[],"tags":[]},{"title":"GraphQL & React: Node, Express & Typescript","slug":"graphql-react-node-express-typescript","date":"2020-08-11T13:36:27.000Z","updated":"2020-08-12T14:23:43.517Z","comments":true,"path":"graphql-react-node-express-typescript/","link":"","permalink":"https://ikaem.github.io/angry-chaired-blog/graphql-react-node-express-typescript/","excerpt":"Part 1 of 10 in GraphQL &amp; React I thought TS setup will be more complicated on the backend side, but it was actually quite simple.I used the brief and convenient guide by Traversy Media, titled TypeScript Setup With Node &amp; Express, and got the thing up in minutes.It seems to me that the key part here is the ts-node package. I am not sure what exactly does, but it did get the TS working.","text":"Part 1 of 10 in GraphQL &amp; React I thought TS setup will be more complicated on the backend side, but it was actually quite simple.I used the brief and convenient guide by Traversy Media, titled TypeScript Setup With Node &amp; Express, and got the thing up in minutes.It seems to me that the key part here is the ts-node package. I am not sure what exactly does, but it did get the TS working. See Project InformationStep 1: Make simple Node and Express server with TypeScriptWe need to: Initialize package.json Install dev dependencies Install other dependencies Initialize and set up the tsconfig.json file for backend Need to modify scripts in package.json Write normal Express server Initialize package.jsonInstall node-pg with: 1npm init Install dev dependenciesThese will only be used while developing the app, and will not be included in the production build – the one that my users see when they use the app.We also need to install TypeScript types for some of the packages used by the server. 1npm -D typescript ts-node nodemon @types/node @types/express @types/cors Install other dependencies1npm install express cors Initialize and set up the tsconfig.json file for backend1tsc --init This creates tsconfig.json file that controls behavior of Typescript. I hope this sounds correct. It is a large file, with code that is mostly commented out. To be able to easily work with TS, we do need to modify it, however, and uncomment few things.Here is the relevant snippet for my setup, copied from the tutorial I mentioned above. “outDir” is used to specify directory where TS compiler will store .js code, created from our .ts code “rootDir” is used to specify directory where we will be writing .ts code “moduleResolution” is explained in the comment below, and I cannot explain it better. 12345678910// ts.config&#123; &quot;compilerOptions&quot;: &#123; ... &quot;outDir&quot;: &quot;./dist&quot;, /* Redirect output structure to the directory. */ &quot;rootDir&quot;: &quot;./src&quot;, ... &quot;moduleResolution&quot;: &quot;node&quot;, /* Specify module resolution strategy: &#x27;node&#x27; (Node.js) or &#x27;classic&#x27; */ &#125;&#125; Need to modify scripts in package.jsonJust a quick explanation.I want to be able to Run a development server When development is done, I want to create a production build I also want to be able to start a server for production build We do these things with scripts in package.json file. Here is the relevant snippet of the file 12345678910111213// package.json&#123; &quot;name&quot;: &quot;graphql-jwt-api&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;server.js&quot;, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node dist/server.js&quot;, &quot;dev&quot;: &quot;nodemon src/server.ts&quot;, &quot;build&quot;: &quot;tsc -p .&quot; &#125;, &quot;keywords&quot;: [], &quot;author&quot;: &quot;&quot;, “dev” is used to specify that nodemon will run server.ts file in src folder.This runs our development server, and the script is activated with command: 1npm run dev “build” is used to have TS compiler compile our .ts code from src folder into .js code in dist folder. TS compiler knows which folders to use because we specified them in the previous step with tsconfig.json file. The script is activated with command: 1npm run build “start” is used to start a server with the production build on it. It is the build from the dist folder, which means that we have to make that build with “npm run build” prior to running this command.The production server is started with: 1npm start Write normal Express serverNote that I use import syntaxt instead of require syntax that is normally used with Node.js. This is possible becuase of TS. 123456789101112131415161718// src/server.jsimport cors from &quot;cors&quot;;import express from &quot;express&quot;; const app = express(); app.use(cors());app.use(express.json()); app.get(&quot;/&quot;, async(req, res) =&gt; &#123; res.json(&quot;Hello&quot;);&#125;); app.listen(3000, () =&gt; &#123; console.log(&quot;Server is listening on port 3000&quot;);&#125;) Project InformationGoals Create an app that uses GrapqhQL on frontend and backend Use PSQL for database Use Typescript on both ends The app should be hold a list of users that can be created, viewed, edited, and deleted. Steps Make simple Node and Express server with TypeScript Create a PostgreSQL database and tables that hold user info Use node-postgres to connect backend to database Set Apollo Express Server Create GQL types, queries and resolvers on backend Pause Make simple frontend with React and TS Set Apollo Client on frontend Establish frontend and backend communication via Apollo Client Create pagination Tech and Tools React React Router Styled Components Node PSQL GraphQL Apollo Server Express Apollo Client Bcrypt TypeScript Express Experience with Tech &amp; ToolsI am new to Typescript, have super little experience with PSQL and GQL and just a tiny bit more skills with Node and Express.I am relatively ok with JS, React and other frontend stuff from the list but I am no way even close to be a seasoned frontend person. DISCLAIMERDon’t take any of this seriously and as a matter-of-fact. These are my notes. It might look like I am trying to teach something to someone. I am not.","categories":[{"name":"grapqhl & react","slug":"grapqhl-react","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/grapqhl-react/"},{"name":"graphql","slug":"graphql","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/graphql/"},{"name":"react","slug":"react","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/react/"},{"name":"node","slug":"node","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/node/"},{"name":"express","slug":"express","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/express/"},{"name":"typescript","slug":"typescript","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/typescript/"}],"tags":[{"name":"react","slug":"react","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/react/"},{"name":"graphql","slug":"graphql","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/graphql/"},{"name":"node","slug":"node","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/node/"},{"name":"express","slug":"express","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/express/"},{"name":"typescript","slug":"typescript","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/typescript/"}]},{"title":"Testing","slug":"testing","date":"2020-08-11T13:36:27.000Z","updated":"2020-08-12T10:20:54.805Z","comments":true,"path":"testing/","link":"","permalink":"https://ikaem.github.io/angry-chaired-blog/testing/","excerpt":"Part 1 of 10 in GraphQL &amp; React I thought TS setup will be more complicated on the backend side, but it was actually quite simple.I used the brief and convenient guide by Traversy Media, titled TypeScript Setup With Node &amp; Express, and got the thing up in minutes.It seems to me that the key part here is the ts-node package. I am not sure what exactly does, but it did get the TS working.","text":"Part 1 of 10 in GraphQL &amp; React I thought TS setup will be more complicated on the backend side, but it was actually quite simple.I used the brief and convenient guide by Traversy Media, titled TypeScript Setup With Node &amp; Express, and got the thing up in minutes.It seems to me that the key part here is the ts-node package. I am not sure what exactly does, but it did get the TS working. See Project InformationStep 1: Make simple Node and Express server with TypeScriptWe need to: Initialize package.json Install dev dependencies Install other dependencies Initialize and set up the tsconfig.json file for backend Need to modify scripts in package.json Write normal Express server Initialize package.jsonInstall node-pg with: 1npm init Install dev dependenciesThese will only be used while developing the app, and will not be included in the production build – the one that my users see when they use the app.We also need to install TypeScript types for some of the packages used by the server. 1npm -D typescript ts-node nodemon @types/node @types/express @types/cors Install other dependencies1npm install express cors Initialize and set up the tsconfig.json file for backend1tsc --init This creates tsconfig.json file that controls behavior of Typescript. I hope this sounds correct. It is a large file, with code that is mostly commented out. To be able to easily work with TS, we do need to modify it, however, and uncomment few things.Here is the relevant snippet for my setup, copied from the tutorial I mentioned above. “outDir” is used to specify directory where TS compiler will store .js code, created from our .ts code “rootDir” is used to specify directory where we will be writing .ts code “moduleResolution” is explained in the comment below, and I cannot explain it better. 12345678910// ts.config&#123; &quot;compilerOptions&quot;: &#123; ... &quot;outDir&quot;: &quot;./dist&quot;, /* Redirect output structure to the directory. */ &quot;rootDir&quot;: &quot;./src&quot;, ... &quot;moduleResolution&quot;: &quot;node&quot;, /* Specify module resolution strategy: &#x27;node&#x27; (Node.js) or &#x27;classic&#x27; */ &#125;&#125; Need to modify scripts in package.jsonJust a quick explanation.I want to be able to Run a development server When development is done, I want to create a production build I also want to be able to start a server for production build We do these things with scripts in package.json file. Here is the relevant snippet of the file 12345678910111213// package.json&#123; &quot;name&quot;: &quot;graphql-jwt-api&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;server.js&quot;, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node dist/server.js&quot;, &quot;dev&quot;: &quot;nodemon src/server.ts&quot;, &quot;build&quot;: &quot;tsc -p .&quot; &#125;, &quot;keywords&quot;: [], &quot;author&quot;: &quot;&quot;, “dev” is used to specify that nodemon will run server.ts file in src folder.This runs our development server, and the script is activated with command: 1npm run dev “build” is used to have TS compiler compile our .ts code from src folder into .js code in dist folder. TS compiler knows which folders to use because we specified them in the previous step with tsconfig.json file. The script is activated with command: 1npm run build “start” is used to start a server with the production build on it. It is the build from the dist folder, which means that we have to make that build with “npm run build” prior to running this command.The production server is started with: 1npm start Write normal Express serverNote that I use import syntaxt instead of require syntax that is normally used with Node.js. This is possible becuase of TS. 123456789101112131415161718// src/server.jsimport cors from &quot;cors&quot;;import express from &quot;express&quot;; const app = express(); app.use(cors());app.use(express.json()); app.get(&quot;/&quot;, async(req, res) =&gt; &#123; res.json(&quot;Hello&quot;);&#125;); app.listen(3000, () =&gt; &#123; console.log(&quot;Server is listening on port 3000&quot;);&#125;) Project InformationGoals Create an app that uses GrapqhQL on frontend and backend Use PSQL for database Use Typescript on both ends The app should be hold a list of users that can be created, viewed, edited, and deleted. Steps Make simple Node and Express server with TypeScript Create a PostgreSQL database and tables that hold user info Use node-postgres to connect backend to database Set Apollo Express Server Create GQL types, queries and resolvers on backend Pause Make simple frontend with React and TS Set Apollo Client on frontend Establish frontend and backend communication via Apollo Client Create pagination Tech and Tools React React Router Styled Components Node PSQL GraphQL Apollo Server Express Apollo Client Bcrypt TypeScript Express Experience with Tech &amp; ToolsI am new to Typescript, have super little experience with PSQL and GQL and just a tiny bit more skills with Node and Express.I am relatively ok with JS, React and other frontend stuff from the list but I am no way even close to be a seasoned frontend person. DISCLAIMERDon’t take any of this seriously and as a matter-of-fact. These are my notes. It might look like I am trying to teach something to someone. I am not.","categories":[{"name":"grapqhl & react","slug":"grapqhl-react","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/grapqhl-react/"},{"name":"graphql","slug":"graphql","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/graphql/"},{"name":"react","slug":"react","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/react/"},{"name":"node","slug":"node","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/node/"},{"name":"express","slug":"express","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/express/"},{"name":"typescript","slug":"typescript","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/typescript/"}],"tags":[{"name":"react","slug":"react","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/react/"},{"name":"graphql","slug":"graphql","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/graphql/"},{"name":"node","slug":"node","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/node/"},{"name":"express","slug":"express","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/express/"},{"name":"typescript","slug":"typescript","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/typescript/"}]}],"categories":[{"name":"grapqhl & react","slug":"grapqhl-react","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/grapqhl-react/"},{"name":"graphql","slug":"graphql","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/graphql/"},{"name":"react","slug":"react","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/react/"},{"name":"node","slug":"node","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/node/"},{"name":"express","slug":"express","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/express/"},{"name":"typescript","slug":"typescript","permalink":"https://ikaem.github.io/angry-chaired-blog/categories/typescript/"}],"tags":[{"name":"react","slug":"react","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/react/"},{"name":"graphql","slug":"graphql","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/graphql/"},{"name":"node","slug":"node","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/node/"},{"name":"express","slug":"express","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/express/"},{"name":"typescript","slug":"typescript","permalink":"https://ikaem.github.io/angry-chaired-blog/tags/typescript/"}]}