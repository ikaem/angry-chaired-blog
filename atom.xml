<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Angry Chaired Blog</title>
  <icon>https://ikaem.github.io/angry-chaired-blog/icon.png</icon>
  <subtitle>Writing about my web development learning...</subtitle>
  <link href="https://ikaem.github.io/angry-chaired-blog/atom.xml" rel="self"/>
  
  <link href="https://ikaem.github.io/angry-chaired-blog/"/>
  <updated>2020-08-17T06:12:27.825Z</updated>
  <id>https://ikaem.github.io/angry-chaired-blog/</id>
  
  <author>
    <name>kaem</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gatsby Web: Audit, Optimize &amp; Deploy</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-audit-optimize-deploy/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-audit-optimize-deploy/</id>
    <published>2020-08-17T06:06:39.000Z</published>
    <updated>2020-08-17T06:12:27.825Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-10-of-10-in-Gatsby-Web&quot;&gt;&lt;a href=&quot;#Part-10-of-10-in-Gatsby-Web&quot; class=&quot;headerlink&quot; title=&quot;Part 10 of 10 in Gatsby Web&quot;&gt;&lt;/a&gt;Part 10 of 10 in Gatsby Web&lt;/h4&gt;&lt;p&gt;After making our components, programmatically creating pages, inserting images and implementing messaging funcitonality, last thing to do is to actually put our website online. &lt;/p&gt;
&lt;p&gt;Before we do that, however, let’s tweak it a bit more.&lt;/p&gt;</summary>
    
    
    
    <category term="gatsby web" scheme="https://ikaem.github.io/angry-chaired-blog/categories/gatsby-web/"/>
    
    
    <category term="gatsby" scheme="https://ikaem.github.io/angry-chaired-blog/tags/gatsby/"/>
    
    <category term="deploy" scheme="https://ikaem.github.io/angry-chaired-blog/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>Gatsby Web: Implement Messaging Feature</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-implement-messaging-feature/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-implement-messaging-feature/</id>
    <published>2020-08-17T05:59:20.000Z</published>
    <updated>2020-08-17T06:05:49.057Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-9-of-10-in-Gatsby-Web&quot;&gt;&lt;a href=&quot;#Part-9-of-10-in-Gatsby-Web&quot; class=&quot;headerlink&quot; title=&quot;Part 9 of 10 in Gatsby Web&quot;&gt;&lt;/a&gt;Part 9 of 10 in Gatsby Web&lt;/h4&gt;&lt;p&gt;The &lt;strong&gt;Contact&lt;/strong&gt; page contains a simple form that users could use to send us a message. There is also a list of other ways on how to contact us, but we want to offer a quick and simple way too, so users can do it on the spot.&lt;/p&gt;</summary>
    
    
    
    <category term="gatsby web" scheme="https://ikaem.github.io/angry-chaired-blog/categories/gatsby-web/"/>
    
    
    <category term="gatsby" scheme="https://ikaem.github.io/angry-chaired-blog/tags/gatsby/"/>
    
    <category term="messaging" scheme="https://ikaem.github.io/angry-chaired-blog/tags/messaging/"/>
    
  </entry>
  
  <entry>
    <title>Gatsby Web: Gatsby Images</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-gatsby-images/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-gatsby-images/</id>
    <published>2020-08-17T05:50:36.000Z</published>
    <updated>2020-08-17T06:05:46.230Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-8-of-10-in-Gatsby-Web&quot;&gt;&lt;a href=&quot;#Part-8-of-10-in-Gatsby-Web&quot; class=&quot;headerlink&quot; title=&quot;Part 8 of 10 in Gatsby Web&quot;&gt;&lt;/a&gt;Part 8 of 10 in Gatsby Web&lt;/h4&gt;&lt;p&gt;Inserting local images into a Gatsby website can be very simple. We can simply put them into the &lt;a href=&quot;https://www.gatsbyjs.org/docs/static-folder&quot;&gt;static folder&lt;/a&gt; that exists in the root of our project, and that is it.&lt;br&gt;Gatsby documentation, however, does not encourage it, and instead recommendes that we use a plugin for this.&lt;/p&gt;
&lt;p&gt;This plugin is &lt;strong&gt;gatsby-image&lt;/strong&gt;, and it is used in combination with few other plugins: &lt;strong&gt;gatsby-transformer-sharp&lt;/strong&gt; and &lt;strong&gt;gatsby-plugin-sharp&lt;/strong&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="gatsby web" scheme="https://ikaem.github.io/angry-chaired-blog/categories/gatsby-web/"/>
    
    
    <category term="gatsby plugins" scheme="https://ikaem.github.io/angry-chaired-blog/tags/gatsby-plugins/"/>
    
    <category term="images" scheme="https://ikaem.github.io/angry-chaired-blog/tags/images/"/>
    
  </entry>
  
  <entry>
    <title>Gatsby Web: Insert Markdown in Gatsby Pages</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-insert-markdown-in-gatsby-pages/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-insert-markdown-in-gatsby-pages/</id>
    <published>2020-08-17T05:43:48.000Z</published>
    <updated>2020-08-17T05:52:07.821Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-7-of-10-in-Gatsby-Web&quot;&gt;&lt;a href=&quot;#Part-7-of-10-in-Gatsby-Web&quot; class=&quot;headerlink&quot; title=&quot;Part 7 of 10 in Gatsby Web&quot;&gt;&lt;/a&gt;Part 7 of 10 in Gatsby Web&lt;/h4&gt;&lt;p&gt;Before we even start, I need to say that Markdown is meant to style text, and not websites. Unfortunately, I went into this expecting to style a page in a certain way, and then just insert pieces of Markdown body into their places, or to style elements in the Markdown document directly.&lt;br&gt;While this is possible, it is a bit of a pain, and more importantly, it goes against the point of Markdown. &lt;/p&gt;</summary>
    
    
    
    <category term="gatsby web" scheme="https://ikaem.github.io/angry-chaired-blog/categories/gatsby-web/"/>
    
    
    <category term="gatsby plugins" scheme="https://ikaem.github.io/angry-chaired-blog/tags/gatsby-plugins/"/>
    
    <category term="markdowns" scheme="https://ikaem.github.io/angry-chaired-blog/tags/markdowns/"/>
    
  </entry>
  
  <entry>
    <title>Gatsby Web: Programatically Create Pages</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-programatically-create-pages/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-programatically-create-pages/</id>
    <published>2020-08-17T05:35:15.000Z</published>
    <updated>2020-08-17T05:40:56.705Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-6-of-10-in-Gatsby-Web&quot;&gt;&lt;a href=&quot;#Part-6-of-10-in-Gatsby-Web&quot; class=&quot;headerlink&quot; title=&quot;Part 6 of 10 in Gatsby Web&quot;&gt;&lt;/a&gt;Part 6 of 10 in Gatsby Web&lt;/h4&gt;&lt;p&gt;As we mentioned in the previous post, this one will be about creating new pages. We will create them programatically, based on Markdown documents that exist in our project.&lt;br&gt;We will also create a template to hold project information that we get from Markdown documents.&lt;/p&gt;</summary>
    
    
    
    <category term="gatsby web" scheme="https://ikaem.github.io/angry-chaired-blog/categories/gatsby-web/"/>
    
    
    <category term="gatsby" scheme="https://ikaem.github.io/angry-chaired-blog/tags/gatsby/"/>
    
  </entry>
  
  <entry>
    <title>Gatsby Web: Manipulate Markdown with Transformer Remark Plugin</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-manipulate-markdown-with-transformer-remark-plugin/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-manipulate-markdown-with-transformer-remark-plugin/</id>
    <published>2020-08-16T20:37:15.000Z</published>
    <updated>2020-08-16T20:43:05.702Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-5-of-10-in-Gatsby-Web&quot;&gt;&lt;a href=&quot;#Part-5-of-10-in-Gatsby-Web&quot; class=&quot;headerlink&quot; title=&quot;Part 5 of 10 in Gatsby Web&quot;&gt;&lt;/a&gt;Part 5 of 10 in Gatsby Web&lt;/h4&gt;&lt;p&gt;The idea of this project was to create a portfolio of learning projects I worked on. To do that, I need a way to store project information, and this would ideally be in form of a file.&lt;br&gt;Of course, I could have had a database, and store this information there. We are working with Gatsby, however, and Gatsby can use Markdown, so we use Markdown.&lt;/p&gt;</summary>
    
    
    
    <category term="gatsby web" scheme="https://ikaem.github.io/angry-chaired-blog/categories/gatsby-web/"/>
    
    
    <category term="gatsby plugins" scheme="https://ikaem.github.io/angry-chaired-blog/tags/gatsby-plugins/"/>
    
    <category term="markdown" scheme="https://ikaem.github.io/angry-chaired-blog/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Gatsby Web: Getting Data with GraphQL &amp; Filesystem Plugin</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-getting-data-with-graphql-filesystem-plugin/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-getting-data-with-graphql-filesystem-plugin/</id>
    <published>2020-08-16T20:28:18.000Z</published>
    <updated>2020-08-16T20:35:16.761Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-4-of-10-in-Gatsby-Web&quot;&gt;&lt;a href=&quot;#Part-4-of-10-in-Gatsby-Web&quot; class=&quot;headerlink&quot; title=&quot;Part 4 of 10 in Gatsby Web&quot;&gt;&lt;/a&gt;Part 4 of 10 in Gatsby Web&lt;/h4&gt;&lt;p&gt;Gatsby is all about GraphQL. We incorporate our site’s metadata into pages with it, we use it to get data from files, and to get and work with images, and so on. &lt;/p&gt;</summary>
    
    
    
    <category term="gatsby web" scheme="https://ikaem.github.io/angry-chaired-blog/categories/gatsby-web/"/>
    
    
    <category term="gatsby" scheme="https://ikaem.github.io/angry-chaired-blog/tags/gatsby/"/>
    
    <category term="graphql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/graphql/"/>
    
    <category term="gatsby plugins" scheme="https://ikaem.github.io/angry-chaired-blog/tags/gatsby-plugins/"/>
    
  </entry>
  
  <entry>
    <title>Gatsby Web: Styled Components</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-styled-components/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-styled-components/</id>
    <published>2020-08-16T20:19:00.000Z</published>
    <updated>2020-08-16T20:25:56.966Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-3-of-10-in-Gatsby-Web&quot;&gt;&lt;a href=&quot;#Part-3-of-10-in-Gatsby-Web&quot; class=&quot;headerlink&quot; title=&quot;Part 3 of 10 in Gatsby Web&quot;&gt;&lt;/a&gt;Part 3 of 10 in Gatsby Web&lt;/h4&gt;&lt;p&gt;At the moment, our app looks pretty dry. In fact, it is ugly. We have to style it a bit.&lt;br&gt;Official Gatsby tutorial goes with CSS Modules when it comes to styling.&lt;br&gt;However, I prefer Styled Components. It allows us to have styles in the same file as React components, we can nest style rules like with Sass, and we can define global styles with it, too. &lt;/p&gt;</summary>
    
    
    
    <category term="gatsby web" scheme="https://ikaem.github.io/angry-chaired-blog/categories/gatsby-web/"/>
    
    
    <category term="gatsby" scheme="https://ikaem.github.io/angry-chaired-blog/tags/gatsby/"/>
    
    <category term="styled components" scheme="https://ikaem.github.io/angry-chaired-blog/tags/styled-components/"/>
    
  </entry>
  
  <entry>
    <title>Gatsby Web: Gatsby &amp; React Components</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-gatsby-react-components/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-gatsby-react-components/</id>
    <published>2020-08-16T20:08:44.000Z</published>
    <updated>2020-08-16T20:17:43.833Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-2-of-10-in-Gatsby-Web&quot;&gt;&lt;a href=&quot;#Part-2-of-10-in-Gatsby-Web&quot; class=&quot;headerlink&quot; title=&quot;Part 2 of 10 in Gatsby Web&quot;&gt;&lt;/a&gt;Part 2 of 10 in Gatsby Web&lt;/h4&gt;&lt;p&gt;Now when we have our basic pages, let’s add some structure to our website.&lt;br&gt;Since all websites have header and footer, it would probably be good that our site has those as well.&lt;/p&gt;</summary>
    
    
    
    <category term="gatsby web" scheme="https://ikaem.github.io/angry-chaired-blog/categories/gatsby-web/"/>
    
    
    <category term="gatsby" scheme="https://ikaem.github.io/angry-chaired-blog/tags/gatsby/"/>
    
    <category term="react" scheme="https://ikaem.github.io/angry-chaired-blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Gatsby Web: New Gatsby Project with TypeScript</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-new-gatsby-project-with-typescript/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/gatsby-web-new-gatsby-project-with-typescript/</id>
    <published>2020-08-16T19:47:07.000Z</published>
    <updated>2020-08-16T20:11:14.858Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-1-of-10-in-Gatsby-Web&quot;&gt;&lt;a href=&quot;#Part-1-of-10-in-Gatsby-Web&quot; class=&quot;headerlink&quot; title=&quot;Part 1 of 10 in Gatsby Web&quot;&gt;&lt;/a&gt;Part 1 of 10 in Gatsby Web&lt;/h4&gt;&lt;p&gt;This project relies heavily on the &lt;a href=&quot;https://www.gatsbyjs.org/tutorial/&quot;&gt;Gatsby official tutorial&lt;/a&gt;. I did modify it somewhat, using TS instead of JS, messing with the filesystem plugin a bit, and straying on occasion when the website needed something different from the tutorial. &lt;/p&gt;
&lt;p&gt;The idea here is to create a website where I will eventually be able to show my projects, and then sometime in the future even move the blog to.&lt;br&gt;I see Gatsby mentioned a lot around the web, so I figured to use it for this project. &lt;/p&gt;</summary>
    
    
    
    <category term="gatsby web" scheme="https://ikaem.github.io/angry-chaired-blog/categories/gatsby-web/"/>
    
    
    <category term="gatsby" scheme="https://ikaem.github.io/angry-chaired-blog/tags/gatsby/"/>
    
    <category term="typescript" scheme="https://ikaem.github.io/angry-chaired-blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Register Functionality</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-register-functionality/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-register-functionality/</id>
    <published>2020-08-16T19:26:21.000Z</published>
    <updated>2020-08-16T19:38:27.856Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-12-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-12-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 12 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 12 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;The last functionality is the &lt;strong&gt;register&lt;/strong&gt; one. The functionality is very similar to the &lt;strong&gt;login&lt;/strong&gt; one, in that we have a mutation that accepts arguments, which are extracted from references to form inputs on the register page.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="graphql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/graphql/"/>
    
    <category term="frontend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/frontend/"/>
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
    <category term="authentication" scheme="https://ikaem.github.io/angry-chaired-blog/tags/authentication/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Silent Token Refresh</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-silent-token-refresh/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-silent-token-refresh/</id>
    <published>2020-08-16T19:13:51.000Z</published>
    <updated>2020-08-16T19:19:00.970Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-11-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-11-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 11 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 11 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="graphql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/graphql/"/>
    
    <category term="frontend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/frontend/"/>
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
    <category term="authentication" scheme="https://ikaem.github.io/angry-chaired-blog/tags/authentication/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Automatic Login Functionality</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-automatic-login-functionality/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-automatic-login-functionality/</id>
    <published>2020-08-16T18:50:48.000Z</published>
    <updated>2020-08-16T20:06:58.277Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-10-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-10-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 10 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 10 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;We have set up the login mechanism in such a way that when a user logs in, a cookie gets set on the backend and stored on the client. This cookie holds a refresh token, valid for 10 days, or until the user explicitly logs out of their account.&lt;/p&gt;
&lt;p&gt;Provided that the user doesn’t log out of their account when they leave the app, we can use that cookie to automatically log into the user’s account when they return to the app.&lt;br&gt;We already have a mutation prepared for that on the backend - the &lt;strong&gt;refreshAccessToken&lt;/strong&gt; one. It returns the same data as the login mutation, so we can use it to login user and get exact same data back to the client. &lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="graphql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/graphql/"/>
    
    <category term="frontend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/frontend/"/>
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
    <category term="authentication" scheme="https://ikaem.github.io/angry-chaired-blog/tags/authentication/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Logout Functionality</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-logout-functionality/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-logout-functionality/</id>
    <published>2020-08-16T18:45:30.000Z</published>
    <updated>2020-08-16T18:49:38.306Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-9-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-9-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 9 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 9 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;When a user logs out on the frontend, the client should call the &lt;strong&gt;logout&lt;/strong&gt; mutation that we have prepared on the backend. That mutation will clear the refresh token column in the database and clear the &lt;strong&gt;refreshToken&lt;/strong&gt; cookie, setting it to an empty string and backdating its expiration date. &lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="graphql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/graphql/"/>
    
    <category term="frontend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/frontend/"/>
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
    <category term="authentication" scheme="https://ikaem.github.io/angry-chaired-blog/tags/authentication/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Login Functionality</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-login-functionality/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-login-functionality/</id>
    <published>2020-08-16T18:24:13.000Z</published>
    <updated>2020-08-16T18:32:15.528Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-8-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-8-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 8 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 8 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;Now that we have setup our Apollo Client to use our headers and cookies, we can finally start to implement uathentication features.&lt;br&gt;First one is the &lt;strong&gt;login&lt;/strong&gt; one.&lt;br&gt;To login a user, we make use of the &lt;strong&gt;login&lt;/strong&gt; mutation we already have prepared on the backend. So that part is done.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="graphql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/graphql/"/>
    
    <category term="frontend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/frontend/"/>
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
    <category term="authentication" scheme="https://ikaem.github.io/angry-chaired-blog/tags/authentication/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Apollo Client &amp; Cookies &amp; Headers</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-apollo-client-cookies-headers/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-apollo-client-cookies-headers/</id>
    <published>2020-08-16T18:12:07.000Z</published>
    <updated>2020-08-16T18:24:02.571Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-7-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-7-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 7 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 7 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;We have setup our backend in such way that a middleware, &lt;strong&gt;express-jwt&lt;/strong&gt;, intercepts all our requests and checks if they come with valid access token attached to their headers.&lt;br&gt;Similarly, we used another middleware, &lt;strong&gt;cookie-parser&lt;/strong&gt;, that also checks all requests for cookies, and populates the &lt;strong&gt;cookies&lt;/strong&gt; property on the request object with existing cookies.&lt;br&gt;Because of such setup, our resolvers are able to perform user authentication.&lt;br&gt;At the moment, we dont’ have access token attached to our headers, nor do we include any cookies with our requests. So let’s change that.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="frontend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/frontend/"/>
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="cookies" scheme="https://ikaem.github.io/angry-chaired-blog/tags/cookies/"/>
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Apollo Client Cache</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-apollo-client-cache/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-apollo-client-cache/</id>
    <published>2020-08-16T18:05:19.000Z</published>
    <updated>2020-08-16T18:11:42.321Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-6-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-6-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 6 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 6 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;We are now moving to the frontend side, to implement authentication functionalities into our React app.&lt;br&gt;We want to be able to login, register and logout from the app. We also want to be able to automatically login when we return to the app, and once we are logged in, we want to stay logged in as long as we are using the app.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="frontend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/frontend/"/>
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="apollo cache" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo-cache/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Authentication &amp; GQL Resolvers</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-authentication-gql-resolvers/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-authentication-gql-resolvers/</id>
    <published>2020-08-16T15:43:56.000Z</published>
    <updated>2020-08-16T15:52:32.669Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-5-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-5-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 5 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 5 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;Ok, this one is long. But, resolvers that we need to create largely follow the same logic as the ones we created in the last series. So that’s good.&lt;/p&gt;
&lt;p&gt;Resolvers are just functions which are (I guess) called by their matching mutations or queries. They need to return data in the the shape that their mutations or queries specify. They also get passed certain parameters, and have access to context that is provided by the Apollo Express Server.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="graphql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/graphql/"/>
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
    <category term="resolvers" scheme="https://ikaem.github.io/angry-chaired-blog/tags/resolvers/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Apollo Server, Cors, JWT &amp; Cookies</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-apollo-server-cors-jwt-cookies/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-apollo-server-cors-jwt-cookies/</id>
    <published>2020-08-16T15:37:58.000Z</published>
    <updated>2020-08-16T15:44:21.371Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-4-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-4-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 4 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 4 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;Now when we have made sure that our requests are inspected for access token for validity on their arrival to the backend, we want to make sure that our resolvers can actually work with both requests and responses. Mainly, we want to be able to have them deal with cookies and set tokens on responses.&lt;br&gt;In addition to this, we want to make sure our server is actually allowed to read and set cookies on clients that access backend resources.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="cookies" scheme="https://ikaem.github.io/angry-chaired-blog/tags/cookies/"/>
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
    <category term="cors" scheme="https://ikaem.github.io/angry-chaired-blog/tags/cors/"/>
    
    <category term="server" scheme="https://ikaem.github.io/angry-chaired-blog/tags/server/"/>
    
    <category term="express" scheme="https://ikaem.github.io/angry-chaired-blog/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Middleware &amp;&amp; JWT Validity</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-middleware-jwt-validity/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-middleware-jwt-validity/</id>
    <published>2020-08-16T15:06:46.000Z</published>
    <updated>2020-08-16T15:36:39.457Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-3-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-3-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 3 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 3 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;When a user sends a request to our backend, we want to check if their access token is valid.&lt;br&gt;We will set up requests to have a place for access token in their headers. This way access token will be sent to the backend with every request.&lt;br&gt;The only thing we need to do on backend is to inspect the token - does it exist at all, and if yes, is it valid. &lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
    <category term="express" scheme="https://ikaem.github.io/angry-chaired-blog/tags/express/"/>
    
    <category term="middleware" scheme="https://ikaem.github.io/angry-chaired-blog/tags/middleware/"/>
    
  </entry>
  
</feed>
