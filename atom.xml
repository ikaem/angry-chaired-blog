<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Angry Chaired Blog</title>
  <icon>https://ikaem.github.io/angry-chaired-blog/icon.png</icon>
  <subtitle>Writing about my web development learning...</subtitle>
  <link href="https://ikaem.github.io/angry-chaired-blog/atom.xml" rel="self"/>
  
  <link href="https://ikaem.github.io/angry-chaired-blog/"/>
  <updated>2020-08-16T15:52:32.669Z</updated>
  <id>https://ikaem.github.io/angry-chaired-blog/</id>
  
  <author>
    <name>kaem</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Authentication &amp; GQL Resolvers</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-authentication-gql-resolvers/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-authentication-gql-resolvers/</id>
    <published>2020-08-16T15:43:56.000Z</published>
    <updated>2020-08-16T15:52:32.669Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-5-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-5-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 5 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 5 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;Ok, this one is long. But, resolvers that we need to create largely follow the same logic as the ones we created in the last series. So that’s good.&lt;/p&gt;
&lt;p&gt;Resolvers are just functions which are (I guess) called by their matching mutations or queries. They need to return data in the the shape that their mutations or queries specify. They also get passed certain parameters, and have access to context that is provided by the Apollo Express Server.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
    <category term="graphql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/graphql/"/>
    
    <category term="resolvers" scheme="https://ikaem.github.io/angry-chaired-blog/tags/resolvers/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Apollo Server, Cors, JWT &amp; Cookies</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-apollo-server-cors-jwt-cookies/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-apollo-server-cors-jwt-cookies/</id>
    <published>2020-08-16T15:37:58.000Z</published>
    <updated>2020-08-16T15:44:21.371Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-4-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-4-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 4 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 4 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;Now when we have made sure that our requests are inspected for access token for validity on their arrival to the backend, we want to make sure that our resolvers can actually work with both requests and responses. Mainly, we want to be able to have them deal with cookies and set tokens on responses.&lt;br&gt;In addition to this, we want to make sure our server is actually allowed to read and set cookies on clients that access backend resources.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="cookies" scheme="https://ikaem.github.io/angry-chaired-blog/tags/cookies/"/>
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
    <category term="cors" scheme="https://ikaem.github.io/angry-chaired-blog/tags/cors/"/>
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="server" scheme="https://ikaem.github.io/angry-chaired-blog/tags/server/"/>
    
    <category term="express" scheme="https://ikaem.github.io/angry-chaired-blog/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Middleware &amp;&amp; JWT Validity</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-middleware-jwt-validity/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-middleware-jwt-validity/</id>
    <published>2020-08-16T15:06:46.000Z</published>
    <updated>2020-08-16T15:36:39.457Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-3-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-3-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 3 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 3 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;When a user sends a request to our backend, we want to check if their access token is valid.&lt;br&gt;We will set up requests to have a place for access token in their headers. This way access token will be sent to the backend with every request.&lt;br&gt;The only thing we need to do on backend is to inspect the token - does it exist at all, and if yes, is it valid. &lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
    <category term="express" scheme="https://ikaem.github.io/angry-chaired-blog/tags/express/"/>
    
    <category term="middleware" scheme="https://ikaem.github.io/angry-chaired-blog/tags/middleware/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Create JSON Web Tokens</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-create-json-web-tokens/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-create-json-web-tokens/</id>
    <published>2020-08-16T14:56:29.000Z</published>
    <updated>2020-08-16T15:05:54.006Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-2-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-2-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 2 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 2 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;We will stray from the GQL path a bit, to get introduced to JSON Web Tokens and figure out how to create them.&lt;br&gt;From what I understand, JWT are signed strings that hold data. They are used to prove certain claims on both ends of our app. For instance, we would have our server create a JWT, which would claim that a user for which this token is created is in fact logged into their account. Our client would then accept this claim as a proof of successful login, and would treat current user as logged in.&lt;br&gt;This is a very simple and very limited explanation. It works for me, however, so let’s move on.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; JWT: Authentication &amp; GQL Types and Queries</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-authentication-gql-types-queries/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-jwt-authentication-gql-types-queries/</id>
    <published>2020-08-16T13:44:30.000Z</published>
    <updated>2020-08-16T15:02:20.810Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-1-of-12-in-GraphQL-amp-React-amp-JWT&quot;&gt;&lt;a href=&quot;#Part-1-of-12-in-GraphQL-amp-React-amp-JWT&quot; class=&quot;headerlink&quot; title=&quot;Part 1 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&quot;&gt;&lt;/a&gt;Part 1 of 12 in GraphQL &amp;amp; React &amp;amp; JWT&lt;/h4&gt;&lt;p&gt;This project is a continuation of the &lt;a href=&quot;categories/graphql-react-psql/&quot;&gt;Graphql &amp;amp; React &amp;amp; Psql series&lt;/a&gt;, where we used GraphQL to get and manipulate data in PSQL database.&lt;br&gt;The idea in this part is to create functionality to log users into their account with a piece of data called JSON Web Token (JWT). This token is created on backend, and sent to and stored on frontend. It is then used for user authentication anytime the user requests protected data. &lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; jwt" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-jwt/"/>
    
    
    <category term="jwt" scheme="https://ikaem.github.io/angry-chaired-blog/tags/jwt/"/>
    
    <category term="graphql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/graphql/"/>
    
    <category term="react" scheme="https://ikaem.github.io/angry-chaired-blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; PSQL: Apollo Client Pagination</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-apollo-client-pagination/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-apollo-client-pagination/</id>
    <published>2020-08-16T13:09:50.000Z</published>
    <updated>2020-08-16T13:41:28.550Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-9-of-9-in-GraphQL-amp-React-amp-PSQL&quot;&gt;&lt;a href=&quot;#Part-9-of-9-in-GraphQL-amp-React-amp-PSQL&quot; class=&quot;headerlink&quot; title=&quot;Part 9 of 9 in GraphQL &amp;amp; React &amp;amp; PSQL&quot;&gt;&lt;/a&gt;Part 9 of 9 in GraphQL &amp;amp; React &amp;amp; PSQL&lt;/h4&gt;&lt;p&gt;Ideally, we would not have all users instantly listed on our home page. We would want to have a part of it, maybe separated into pages, or extendable if a user wants so.&lt;br&gt;Pagination means that, when fetching data, we only fetch a part of it. If a user wants to see more data, they interact with the app to tell it so, and the app fetches more data as a response.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; psql" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-psql/"/>
    
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="react" scheme="https://ikaem.github.io/angry-chaired-blog/tags/react/"/>
    
    <category term="frontend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/frontend/"/>
    
    <category term="pagination" scheme="https://ikaem.github.io/angry-chaired-blog/tags/pagination/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; PSQL: Apollo Client &amp; Backend-frontend communication</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-apollo-client-backend-frontend-communication/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-apollo-client-backend-frontend-communication/</id>
    <published>2020-08-16T13:05:54.000Z</published>
    <updated>2020-08-16T13:08:56.454Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-8-of-9-in-GraphQL-amp-React-amp-PSQL&quot;&gt;&lt;a href=&quot;#Part-8-of-9-in-GraphQL-amp-React-amp-PSQL&quot; class=&quot;headerlink&quot; title=&quot;Part 8 of 9 in GraphQL &amp;amp; React &amp;amp; PSQL&quot;&gt;&lt;/a&gt;Part 8 of 9 in GraphQL &amp;amp; React &amp;amp; PSQL&lt;/h4&gt;&lt;p&gt;Now that we have the Apollo Client set up on the frontend, we can use it to communicate with the backend.&lt;br&gt;For this purpose, Apollo Client provides hooks that can be used to query and mutate data. There is probably one to subscribe to data, but I don’t use it in this project. &lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; psql" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-psql/"/>
    
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="react" scheme="https://ikaem.github.io/angry-chaired-blog/tags/react/"/>
    
    <category term="frontend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/frontend/"/>
    
    <category term="backend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; PSQL: Apollo Client &amp; Frontend</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-apollo-client-frontend/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-apollo-client-frontend/</id>
    <published>2020-08-16T12:57:09.000Z</published>
    <updated>2020-08-16T13:07:00.972Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-7-of-9-in-GraphQL-amp-React-amp-PSQL&quot;&gt;&lt;a href=&quot;#Part-7-of-9-in-GraphQL-amp-React-amp-PSQL&quot; class=&quot;headerlink&quot; title=&quot;Part 7 of 9 in GraphQL &amp;amp; React &amp;amp; PSQL&quot;&gt;&lt;/a&gt;Part 7 of 9 in GraphQL &amp;amp; React &amp;amp; PSQL&lt;/h4&gt;&lt;p&gt;Previously, we have set up Apollo Server on the backend. Now we have to find a way to get backend GraphQL data to the frontend side.&lt;br&gt;We will use Apollo Client for this. To be more specific, we will use Apollo Client 3 beta. The client provides tools to send queries and mutations to the backend, as well as to cache received data to keep it in memory, and use it throughout the application - sort of a state management.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; psql" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-psql/"/>
    
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="react" scheme="https://ikaem.github.io/angry-chaired-blog/tags/react/"/>
    
    <category term="frontend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; PSQL: React &amp; TypeScript Frontend</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-react-typescript-frontend/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-react-typescript-frontend/</id>
    <published>2020-08-16T12:50:06.000Z</published>
    <updated>2020-08-16T12:55:57.360Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-6-of-9-in-GraphQL-amp-React-amp-PSQL&quot;&gt;&lt;a href=&quot;#Part-6-of-9-in-GraphQL-amp-React-amp-PSQL&quot; class=&quot;headerlink&quot; title=&quot;Part 6 of 9 in GraphQL &amp;amp; React &amp;amp; PSQL&quot;&gt;&lt;/a&gt;Part 6 of 9 in GraphQL &amp;amp; React &amp;amp; PSQL&lt;/h4&gt;&lt;p&gt;Frontend is made with React, which I am relatively comfortable with. I don’t want to spend too much time on createing components and routine stuff, so I will just breeze through it to get to working with Apollo on frontend.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; psql" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-psql/"/>
    
    
    <category term="react" scheme="https://ikaem.github.io/angry-chaired-blog/tags/react/"/>
    
    <category term="frontend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/frontend/"/>
    
    <category term="typescript" scheme="https://ikaem.github.io/angry-chaired-blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; PSQL: Types, Queries &amp; Resolvers in Apollo Server</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-types-queries-resolvers-in-apollo-server/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-types-queries-resolvers-in-apollo-server/</id>
    <published>2020-08-16T12:40:21.000Z</published>
    <updated>2020-08-16T12:55:11.562Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-5-of-9-in-GraphQL-amp-React-amp-PSQL&quot;&gt;&lt;a href=&quot;#Part-5-of-9-in-GraphQL-amp-React-amp-PSQL&quot; class=&quot;headerlink&quot; title=&quot;Part 5 of 9 in GraphQL &amp;amp; React &amp;amp; PSQL&quot;&gt;&lt;/a&gt;Part 5 of 9 in GraphQL &amp;amp; React &amp;amp; PSQL&lt;/h4&gt;&lt;p&gt;GraphQL requires a quick setup to be able to fetch and modify data in the database. In particular, it needs to know what type of data it deals with, what are the possible queries it might receive in regards to data, and how to actually resolve those queries.&lt;br&gt;This is what we deal with in this post.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; psql" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-psql/"/>
    
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="graphql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/graphql/"/>
    
    <category term="backend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/backend/"/>
    
    <category term="types" scheme="https://ikaem.github.io/angry-chaired-blog/tags/types/"/>
    
    <category term="queries" scheme="https://ikaem.github.io/angry-chaired-blog/tags/queries/"/>
    
    <category term="resolvers" scheme="https://ikaem.github.io/angry-chaired-blog/tags/resolvers/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; PSQL: Setup Apollo Server Express</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-setup-apollo-server-express/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-setup-apollo-server-express/</id>
    <published>2020-08-16T12:23:41.000Z</published>
    <updated>2020-08-16T12:55:02.961Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-4-of-10-in-GraphQL-amp-React-amp-PSQL&quot;&gt;&lt;a href=&quot;#Part-4-of-10-in-GraphQL-amp-React-amp-PSQL&quot; class=&quot;headerlink&quot; title=&quot;Part 4 of 10 in GraphQL &amp;amp; React &amp;amp; PSQL&quot;&gt;&lt;/a&gt;Part 4 of 10 in GraphQL &amp;amp; React &amp;amp; PSQL&lt;/h4&gt;&lt;p&gt;We reached an important point. It is the main reason I actually did this small project. I wanted to learn to use GrapqhQL, and figured I should create a small app to find out how it works.&lt;br&gt;I am not going to explain GQL in depth. I am not even close to being able to do that. Instead, I will show how to use Apollo’s tools to be able to fetch, create and edit data via GrapqhQL.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; psql" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-psql/"/>
    
    
    <category term="apollo" scheme="https://ikaem.github.io/angry-chaired-blog/tags/apollo/"/>
    
    <category term="server" scheme="https://ikaem.github.io/angry-chaired-blog/tags/server/"/>
    
    <category term="express" scheme="https://ikaem.github.io/angry-chaired-blog/tags/express/"/>
    
    <category term="graphql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/graphql/"/>
    
    <category term="node" scheme="https://ikaem.github.io/angry-chaired-blog/tags/node/"/>
    
    <category term="backend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; PSQL: Using node-postgres</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-using-node-postgres/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-using-node-postgres/</id>
    <published>2020-08-16T12:15:50.000Z</published>
    <updated>2020-08-16T12:55:18.088Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-3-of-10-in-GraphQL-amp-React-amp-PSQL&quot;&gt;&lt;a href=&quot;#Part-3-of-10-in-GraphQL-amp-React-amp-PSQL&quot; class=&quot;headerlink&quot; title=&quot;Part 3 of 10 in GraphQL &amp;amp; React &amp;amp; PSQL&quot;&gt;&lt;/a&gt;Part 3 of 10 in GraphQL &amp;amp; React &amp;amp; PSQL&lt;/h4&gt;&lt;p&gt;Node-postgres is a tool to connect Node.js with PSQL database and interact with it. That is what I know about it in terms of describing it. It is very easy to use, and it uses PSQL syntax for queries.&lt;br&gt;There is another tool that I tried called Knex. Knext has its methods for inserting, selecting, updating, transactions and so on. It feels like I have to learn another language.&lt;br&gt;With node-postgres, I can just use PSQL knowledge that I have. &lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; psql" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-psql/"/>
    
    
    <category term="express" scheme="https://ikaem.github.io/angry-chaired-blog/tags/express/"/>
    
    <category term="psql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/psql/"/>
    
    <category term="node" scheme="https://ikaem.github.io/angry-chaired-blog/tags/node/"/>
    
    <category term="backend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/backend/"/>
    
    <category term="node-posgres" scheme="https://ikaem.github.io/angry-chaired-blog/tags/node-posgres/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; PSQL: Create PSQL database</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-create-psql-database/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-create-psql-database/</id>
    <published>2020-08-16T12:06:18.000Z</published>
    <updated>2020-08-16T12:54:52.624Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-2-of-10-in-GraphQL-amp-React-amp-PSQL&quot;&gt;&lt;a href=&quot;#Part-2-of-10-in-GraphQL-amp-React-amp-PSQL&quot; class=&quot;headerlink&quot; title=&quot;Part 2 of 10 in GraphQL &amp;amp; React &amp;amp; PSQL&quot;&gt;&lt;/a&gt;Part 2 of 10 in GraphQL &amp;amp; React &amp;amp; PSQL&lt;/h4&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; psql" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-psql/"/>
    
    
    <category term="psql" scheme="https://ikaem.github.io/angry-chaired-blog/tags/psql/"/>
    
    <category term="database" scheme="https://ikaem.github.io/angry-chaired-blog/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL &amp; React &amp; PSQL: Node, Express &amp; TypeScript</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-node-express-typescript/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/graphql-react-psql-node-express-typescript/</id>
    <published>2020-08-16T11:12:00.000Z</published>
    <updated>2020-08-16T12:54:31.601Z</updated>
    
    
    <summary type="html">&lt;!-- Step Content Start --&gt;

&lt;h4 id=&quot;Part-1-of-10-in-GraphQL-amp-React-amp-PSQL&quot;&gt;&lt;a href=&quot;#Part-1-of-10-in-GraphQL-amp-React-amp-PSQL&quot; class=&quot;headerlink&quot; title=&quot;Part 1 of 10 in GraphQL &amp;amp; React &amp;amp; PSQL&quot;&gt;&lt;/a&gt;Part 1 of 10 in GraphQL &amp;amp; React &amp;amp; PSQL&lt;/h4&gt;&lt;p&gt;This is my first project to be published on the blog. I am a bit anxious, as I am no expert by any means, and I am putting my ignorance out there for the world to see. Still, let’s do it. &lt;/p&gt;
&lt;p&gt;This post is the start of a two-part series primarily focused on GraphQL and JWT. This first part is mostly about GQL, and how it works with PSQL and React. The other one will be more focused on GQL and JWT.&lt;/p&gt;
&lt;p&gt;In this post, specifically, we will set up a Node server with Express and TypeScript.&lt;/p&gt;</summary>
    
    
    
    <category term="graphql &amp; react &amp; psql" scheme="https://ikaem.github.io/angry-chaired-blog/categories/graphql-react-psql/"/>
    
    
    <category term="express" scheme="https://ikaem.github.io/angry-chaired-blog/tags/express/"/>
    
    <category term="grapqhl" scheme="https://ikaem.github.io/angry-chaired-blog/tags/grapqhl/"/>
    
    <category term="node" scheme="https://ikaem.github.io/angry-chaired-blog/tags/node/"/>
    
    <category term="typescript" scheme="https://ikaem.github.io/angry-chaired-blog/tags/typescript/"/>
    
    <category term="backend" scheme="https://ikaem.github.io/angry-chaired-blog/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to Angry Chaired Blog</title>
    <link href="https://ikaem.github.io/angry-chaired-blog/2020/welcome-to-angry-chaired-blog/"/>
    <id>https://ikaem.github.io/angry-chaired-blog/2020/welcome-to-angry-chaired-blog/</id>
    <published>2020-08-13T20:16:35.000Z</published>
    <updated>2020-08-16T12:20:39.956Z</updated>
    
    
    <summary type="html">&lt;p&gt;Angry Chaired Blog is a chronicle of my learning of web development. It is a collection of posts, usually belonging to a bigger project. While each project does have an idea and a set of overarching goals, posts are usually concerned with solving a specific problem.&lt;/p&gt;</summary>
    
    
    
    <category term="angry chaired" scheme="https://ikaem.github.io/angry-chaired-blog/categories/angry-chaired/"/>
    
    <category term="random rant" scheme="https://ikaem.github.io/angry-chaired-blog/categories/angry-chaired/random-rant/"/>
    
    <category term="feature introduction" scheme="https://ikaem.github.io/angry-chaired-blog/categories/angry-chaired/feature-introduction/"/>
    
    
    <category term="angry chair" scheme="https://ikaem.github.io/angry-chaired-blog/tags/angry-chair/"/>
    
    <category term="introduction" scheme="https://ikaem.github.io/angry-chaired-blog/tags/introduction/"/>
    
    <category term="about" scheme="https://ikaem.github.io/angry-chaired-blog/tags/about/"/>
    
    <category term="blog" scheme="https://ikaem.github.io/angry-chaired-blog/tags/blog/"/>
    
  </entry>
  
</feed>
